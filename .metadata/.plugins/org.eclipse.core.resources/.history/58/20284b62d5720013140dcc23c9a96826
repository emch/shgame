/*
 * _tree.c
 *
 *  Created on: 1 janv. 2014
 *      Author: Emmanuel
 */

#include <stdlib.h>
#include <string.h>

#include "shdata.h"

/**
 * \fn		NewNode
 * \brief	Creates a new node representing a folder
 *
 * \param	name		folder name
 * \param	nb_children	number of files in the folder
 *
 * \returns	pointer to SHNode
 */
SHNode* NewNode(char* name, int nb_max_children) {
	SHNode* res = malloc(sizeof(SHNode));

	// Fields
	strcpy(res->name, name);

	res->filetype 		= SH_FOLDER;
	res->value 			= NULL;

	res->nb_children	= 0; // will be increased on child addition
	res->nb_children	= nb_max_children;
	res->children		= malloc(nb_max_children*sizeof(SHNode));

	return res;
}

/**
 * \fn		NewLeaf
 * \brief	Creates a new node representing a file
 *
 * \param	name		file name
 * \param	filetype	file type (for casting)
 * \param	value		pointer to value. At this stage, value has already been dynamically allocated (malloc ...)
 * 						In case of a FILE pointer, do not use fopen (name is sufficient for future use)
 *
 * \returns	pointer to SHNode
 */
// WARNING : if filetype is SH_FOLDER, do not use fopen but set value to NULL
SHNode* NewLeaf(char* name, SH_FILETYPE filetype, void* value) {
	SHNode* res = malloc(sizeof(SHNode));

	// Fields
	strcpy(res->name, name);

	res->filetype 			= filetype;
	res->value 				= value;

	res->nb_children		= 0;
	res->nb_max_children	= 0;
	res->children			= NULL;

	return res;
}

// child needs to be in memory (used NewNode)
void AddChild(SHNode* node, SHNode* child) {

}

// destroys child and all subchildren
void RemoveChild(SHNode* node, char* child_name) {
//	DestroyNode(node->children[i]) where i has been identified using child_name
}

int GetChildId(SHNode* node, char* child_name) {
	return 0;
}

/**
 * \fn		DestroyNode
 * \brief	Destroy node and children recursively
 *
 * \param	node	node to destroy
 */
void DestroyNode(SHNode* node) {
	int i;
	for(i = 0; i < node->nb_children; i++) {
		DestroyNode(node->children[i]);
	}
	free(node->value);
	free(node->children);
	free(node);
}
