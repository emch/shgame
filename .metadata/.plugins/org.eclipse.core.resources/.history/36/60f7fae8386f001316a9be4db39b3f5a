/*
 * main.c
 *
 *  Created on: 23 déc. 2013
 *      Author: Emmanuel
 */

#include <stdlib.h>
#include <stdio.h>
#include <SDL/SDL.h>

#include "shdata.h"
#include "params.h"

void loop(SDL_Surface*);

// 2 threads : updates serveur et update graphiques

int main(int argc, char *argv[]) {
	// Initialization
	SHLogger* myLogger = CreateLogger("shclient.log"); // logging device

	SDL_Surface *screen = NULL, *board = NULL, *players = NULL;
    if (SDL_Init(SDL_INIT_VIDEO | SDL_INIT_TIMER) == -1)
    {
        flogf(myLogger, "Failed to initialize SDL : %s\n", SDL_GetError());
        exit(EXIT_FAILURE);
    }

    // SDL started successfully
    flogf(myLogger,"SDL initialized\r\n");

    if((screen = SDL_SetVideoMode(SCREEN_WIDTH, SCREEN_HEIGHT, 32, SDL_HWSURFACE | SDL_DOUBLEBUF)) == NULL) {
    	flogf(myLogger, "Failed to set video mode : %s\n", SDL_GetError());
    	exit(EXIT_FAILURE);
    }

    flogf(myLogger,"Video mode set\r\n");
    SDL_WM_SetCaption("SHClient", NULL);

    // too few arguments to SDL_CreateRGBSurface ???
//    if((board = SDL_CreateRGBSurface(SDL_SWSURFACE, BOARD_SURF_WIDTH, BOARD_SURF_HEIGHT, 32, RMASK, GMASK, BMASK, AMASK)) == NULL) {
//    	flogf(myLogger, "Failed to initialize board surface : %s\n", SDL_GetError());
//    	exit(EXIT_FAILURE);
//    }
//    flogf(myLogger,"Board surface initialized\r\n");
    board = SDL_CreateRGBSurface(SDL_SWSURFACE, BOARD_SURF_WIDTH, BOARD_SURF_HEIGHT, 32, 0, 0, 0, 0);
//    SDL_CreateRGBSurface(SDL_HWSURFACE, 220, 180, 32, 0, 0, 0, 0);
    // let players be a white background, rounded corner surface
    // idem for board with 5pixels between the 2 surfaces
    // these will be fixed surfaces at given positions (see BlitSUrface)!!
    // End of Initialization !!

    // Main loop
    loop(screen);

    // Garbage collector
    SDL_Quit();
    DestroyLogger(myLogger);

    // End of program
    return EXIT_SUCCESS;
}

// SDL update loop (main thread)
void loop(SDL_Surface* screen)
{
    int done = 0;
    SDL_Event event;

    while (!done)
    {
        SDL_WaitEvent(&event);
        switch(event.type)
        {
            case SDL_QUIT:
                done = 1;
                break;
        }

        SDL_FillRect(screen, NULL, SDL_MapRGB(screen->format, 100, 100, 100)); // grey
        //SDL_BlitSurface(zozor, NULL, ecran, &pos);
        SDL_Flip(screen);

        // Maximum FPS
        SDL_Delay(1000/MAX_FPS);
    }
}
