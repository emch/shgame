/*
 * shdata.h
 *
 *  Created on: 26 déc. 2013
 *      Author: Emmanuel
 */

#ifndef SHDATA_H_
#define SHDATA_H_

/********************************* Parameters ********************************/
/**
 * \enum	SH_ALIGNMENT
 * \brief	Character's alignment indicator.
 */
typedef enum SH_ALIGNMENT {
	NEUTRAL, HUNTER, SHADOW
} SH_ALIGNMENT;

/**
 * \enum	SH_COLOR
 * \brief	Available colors.
 */
typedef enum SH_COLOR {
	WHITE, RED, BLUE, GREEN, ORANGE, YELLOW, BROWN, VIOLET
} SH_COLOR;

/**
 * \enum	SH_RAW_TYPE
 * \brief	Indicator for use in hashtable elements to store variables types.
 */
// SH_RAW_TYPE = INT by default and STRING if separators "" appear
typedef enum SH_RAW_TYPE {
	STRING, INT
} SH_RAW_TYPE;
/*****************************************************************************/

/********************************* _hashtable ********************************/
typedef struct _hashtable_elt 	hashtable_elt_t;
typedef struct _hashtable 		hashtable_t;

/**
 * \struct	_hashtable_elt
 * \brief	Element of a given hashtable. An element stores a value for a given key (string)
 */
struct _hashtable_elt {
	int					id;
	hashtable_t*		parent;
	char** 				key;
	SH_RAW_TYPE			value_type;
	char** 				value;
	hashtable_elt_t*	next;
};

/**
 * \struct 	_hashtable
 * \brief	As its name indicates, structure for handling hashtables !
 */
struct _hashtable {
	char**				name;
	hashtable_elt_t*	first;
	hashtable_elt_t*	last;
	int					nb_elts;
};

// Prototypes
hashtable_elt_t* NewHashtableElement(hashtable_t*, char*, SH_RAW_TYPE, char*, hashtable_elt_t*);
void DestroyHashtableElement(hashtable_elt_t*);
hashtable_t* NewHashtable(char*);
void DestroyHashtable(hashtable_t*);
void AppendHashtableElement(hashtable_t*, hashtable_elt_t*);
hashtable_elt_t* GetHashtableElementByKey(hashtable_t*, char*);
int GetHashtableElementIntValue(hashtable_elt_t*);
char* GetHashtableElementStringValue(hashtable_elt_t*);

/*****************************************************************************/

/*********************************** _logger *********************************/
typedef struct _logger logger_t;
/*****************************************************************************/

/******************************** SHCharacter ********************************/
/**
 * \struct 	SHCharacter
 * \brief	Structure for storing complete information on a given character.
 */
typedef struct SHCharacter {
	char			name[8];
	SH_ALIGNMENT	alignment;
} SHCharacter;

//SHCharacter* LoadCharacter(hashtable_t*, char*);
//void DestroyCharacter(SHCharacter*);
/*****************************************************************************/

/********************************** SHPlayer *********************************/
/**
 * \struct	SHPlayer
 * \brief	Storing information on a player.
 */
typedef struct SHPlayer {
	int 			id;
	char 			name[20];
	SHCharacter*	character;
	int				status; 	// 0 = dead ; 1 = alive
	SH_COLOR		color;
	int				health;
	int				area;
	int				dice; // SHDice ?
	// cards ... objects ...
} SHPlayer;
/*****************************************************************************/

#endif /* SHDATA_H_ */
